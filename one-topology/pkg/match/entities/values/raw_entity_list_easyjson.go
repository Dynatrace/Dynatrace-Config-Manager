// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package values

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues(in *jlexer.Lexer, out *properties) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "detectedName":
			out.DetectedName = string(in.StringIntern())
		case "oneAgentCustomHostName":
			if in.IsNull() {
				in.Skip()
				out.OneAgentCustomHostName = nil
			} else {
				if out.OneAgentCustomHostName == nil {
					out.OneAgentCustomHostName = new(string)
				}
				*out.OneAgentCustomHostName = string(in.StringIntern())
			}
		case "geolocationCode":
			if in.IsNull() {
				in.Skip()
				out.GeolocationCode = nil
			} else {
				if out.GeolocationCode == nil {
					out.GeolocationCode = new(string)
				}
				*out.GeolocationCode = string(in.StringIntern())
			}
		case "geolocationType":
			if in.IsNull() {
				in.Skip()
				out.GeolocationType = nil
			} else {
				if out.GeolocationType == nil {
					out.GeolocationType = new(string)
				}
				*out.GeolocationType = string(in.StringIntern())
			}
		case "webServiceName":
			if in.IsNull() {
				in.Skip()
				out.WebServiceName = nil
			} else {
				if out.WebServiceName == nil {
					out.WebServiceName = new(string)
				}
				*out.WebServiceName = string(in.StringIntern())
			}
		case "webServiceNamespace":
			if in.IsNull() {
				in.Skip()
				out.WebServiceNamespace = nil
			} else {
				if out.WebServiceNamespace == nil {
					out.WebServiceNamespace = new(string)
				}
				*out.WebServiceNamespace = string(in.StringIntern())
			}
		case "ipAddress":
			if in.IsNull() {
				in.Skip()
				out.IpAddress = nil
			} else {
				if out.IpAddress == nil {
					out.IpAddress = new([]string)
				}
				if in.IsNull() {
					in.Skip()
					*out.IpAddress = nil
				} else {
					in.Delim('[')
					if *out.IpAddress == nil {
						if !in.IsDelim(']') {
							*out.IpAddress = make([]string, 0, 4)
						} else {
							*out.IpAddress = []string{}
						}
					} else {
						*out.IpAddress = (*out.IpAddress)[:0]
					}
					for !in.IsDelim(']') {
						var v1 string
						v1 = string(in.StringIntern())
						*out.IpAddress = append(*out.IpAddress, v1)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "internalIpAddresses":
			if in.IsNull() {
				in.Skip()
				out.InternalIpAddresses = nil
			} else {
				if out.InternalIpAddresses == nil {
					out.InternalIpAddresses = new([]string)
				}
				if in.IsNull() {
					in.Skip()
					*out.InternalIpAddresses = nil
				} else {
					in.Delim('[')
					if *out.InternalIpAddresses == nil {
						if !in.IsDelim(']') {
							*out.InternalIpAddresses = make([]string, 0, 4)
						} else {
							*out.InternalIpAddresses = []string{}
						}
					} else {
						*out.InternalIpAddresses = (*out.InternalIpAddresses)[:0]
					}
					for !in.IsDelim(']') {
						var v2 string
						v2 = string(in.StringIntern())
						*out.InternalIpAddresses = append(*out.InternalIpAddresses, v2)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "metadata":
			if in.IsNull() {
				in.Skip()
				out.Metadata = nil
			} else {
				if out.Metadata == nil {
					out.Metadata = new([]Metadata)
				}
				if in.IsNull() {
					in.Skip()
					*out.Metadata = nil
				} else {
					in.Delim('[')
					if *out.Metadata == nil {
						if !in.IsDelim(']') {
							*out.Metadata = make([]Metadata, 0, 2)
						} else {
							*out.Metadata = []Metadata{}
						}
					} else {
						*out.Metadata = (*out.Metadata)[:0]
					}
					for !in.IsDelim(']') {
						var v3 Metadata
						(v3).UnmarshalEasyJSON(in)
						*out.Metadata = append(*out.Metadata, v3)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues(out *jwriter.Writer, in properties) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DetectedName != "" {
		const prefix string = ",\"detectedName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DetectedName))
	}
	if in.OneAgentCustomHostName != nil {
		const prefix string = ",\"oneAgentCustomHostName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.OneAgentCustomHostName))
	}
	if in.GeolocationCode != nil {
		const prefix string = ",\"geolocationCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GeolocationCode))
	}
	if in.GeolocationType != nil {
		const prefix string = ",\"geolocationType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GeolocationType))
	}
	if in.WebServiceName != nil {
		const prefix string = ",\"webServiceName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.WebServiceName))
	}
	if in.WebServiceNamespace != nil {
		const prefix string = ",\"webServiceNamespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.WebServiceNamespace))
	}
	if in.IpAddress != nil {
		const prefix string = ",\"ipAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.IpAddress == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range *in.IpAddress {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	if in.InternalIpAddresses != nil {
		const prefix string = ",\"internalIpAddresses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.InternalIpAddresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range *in.InternalIpAddresses {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if in.Metadata != nil {
		const prefix string = ",\"metadata\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.Metadata == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range *in.Metadata {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v properties) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v properties) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *properties) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *properties) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues(l, v)
}
func easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues1(in *jlexer.Lexer, out *fromRelationships) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "runsOnHost":
			if in.IsNull() {
				in.Skip()
				out.RunsOnHost = nil
			} else {
				if out.RunsOnHost == nil {
					out.RunsOnHost = new([]Relation)
				}
				if in.IsNull() {
					in.Skip()
					*out.RunsOnHost = nil
				} else {
					in.Delim('[')
					if *out.RunsOnHost == nil {
						if !in.IsDelim(']') {
							*out.RunsOnHost = make([]Relation, 0, 4)
						} else {
							*out.RunsOnHost = []Relation{}
						}
					} else {
						*out.RunsOnHost = (*out.RunsOnHost)[:0]
					}
					for !in.IsDelim(']') {
						var v10 Relation
						(v10).UnmarshalEasyJSON(in)
						*out.RunsOnHost = append(*out.RunsOnHost, v10)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "isProcessOf":
			if in.IsNull() {
				in.Skip()
				out.IsProcessOf = nil
			} else {
				if out.IsProcessOf == nil {
					out.IsProcessOf = new([]Relation)
				}
				if in.IsNull() {
					in.Skip()
					*out.IsProcessOf = nil
				} else {
					in.Delim('[')
					if *out.IsProcessOf == nil {
						if !in.IsDelim(']') {
							*out.IsProcessOf = make([]Relation, 0, 4)
						} else {
							*out.IsProcessOf = []Relation{}
						}
					} else {
						*out.IsProcessOf = (*out.IsProcessOf)[:0]
					}
					for !in.IsDelim(']') {
						var v11 Relation
						(v11).UnmarshalEasyJSON(in)
						*out.IsProcessOf = append(*out.IsProcessOf, v11)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "runsOn":
			if in.IsNull() {
				in.Skip()
				out.RunsOn = nil
			} else {
				if out.RunsOn == nil {
					out.RunsOn = new([]Relation)
				}
				if in.IsNull() {
					in.Skip()
					*out.RunsOn = nil
				} else {
					in.Delim('[')
					if *out.RunsOn == nil {
						if !in.IsDelim(']') {
							*out.RunsOn = make([]Relation, 0, 4)
						} else {
							*out.RunsOn = []Relation{}
						}
					} else {
						*out.RunsOn = (*out.RunsOn)[:0]
					}
					for !in.IsDelim(']') {
						var v12 Relation
						(v12).UnmarshalEasyJSON(in)
						*out.RunsOn = append(*out.RunsOn, v12)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "isInstanceOf":
			if in.IsNull() {
				in.Skip()
				out.IsInstanceOf = nil
			} else {
				if out.IsInstanceOf == nil {
					out.IsInstanceOf = new([]Relation)
				}
				if in.IsNull() {
					in.Skip()
					*out.IsInstanceOf = nil
				} else {
					in.Delim('[')
					if *out.IsInstanceOf == nil {
						if !in.IsDelim(']') {
							*out.IsInstanceOf = make([]Relation, 0, 4)
						} else {
							*out.IsInstanceOf = []Relation{}
						}
					} else {
						*out.IsInstanceOf = (*out.IsInstanceOf)[:0]
					}
					for !in.IsDelim(']') {
						var v13 Relation
						(v13).UnmarshalEasyJSON(in)
						*out.IsInstanceOf = append(*out.IsInstanceOf, v13)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "isCgiOfHost":
			if in.IsNull() {
				in.Skip()
				out.IsCgiOfHost = nil
			} else {
				if out.IsCgiOfHost == nil {
					out.IsCgiOfHost = new([]Relation)
				}
				if in.IsNull() {
					in.Skip()
					*out.IsCgiOfHost = nil
				} else {
					in.Delim('[')
					if *out.IsCgiOfHost == nil {
						if !in.IsDelim(']') {
							*out.IsCgiOfHost = make([]Relation, 0, 4)
						} else {
							*out.IsCgiOfHost = []Relation{}
						}
					} else {
						*out.IsCgiOfHost = (*out.IsCgiOfHost)[:0]
					}
					for !in.IsDelim(']') {
						var v14 Relation
						(v14).UnmarshalEasyJSON(in)
						*out.IsCgiOfHost = append(*out.IsCgiOfHost, v14)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "isDiskOf":
			if in.IsNull() {
				in.Skip()
				out.IsDiskOf = nil
			} else {
				if out.IsDiskOf == nil {
					out.IsDiskOf = new([]Relation)
				}
				if in.IsNull() {
					in.Skip()
					*out.IsDiskOf = nil
				} else {
					in.Delim('[')
					if *out.IsDiskOf == nil {
						if !in.IsDelim(']') {
							*out.IsDiskOf = make([]Relation, 0, 4)
						} else {
							*out.IsDiskOf = []Relation{}
						}
					} else {
						*out.IsDiskOf = (*out.IsDiskOf)[:0]
					}
					for !in.IsDelim(']') {
						var v15 Relation
						(v15).UnmarshalEasyJSON(in)
						*out.IsDiskOf = append(*out.IsDiskOf, v15)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "isStepOf":
			if in.IsNull() {
				in.Skip()
				out.IsStepOf = nil
			} else {
				if out.IsStepOf == nil {
					out.IsStepOf = new([]Relation)
				}
				if in.IsNull() {
					in.Skip()
					*out.IsStepOf = nil
				} else {
					in.Delim('[')
					if *out.IsStepOf == nil {
						if !in.IsDelim(']') {
							*out.IsStepOf = make([]Relation, 0, 4)
						} else {
							*out.IsStepOf = []Relation{}
						}
					} else {
						*out.IsStepOf = (*out.IsStepOf)[:0]
					}
					for !in.IsDelim(']') {
						var v16 Relation
						(v16).UnmarshalEasyJSON(in)
						*out.IsStepOf = append(*out.IsStepOf, v16)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "isApplicationOfSyntheticTest":
			if in.IsNull() {
				in.Skip()
				out.IsApplicationOfSyntheticTest = nil
			} else {
				if out.IsApplicationOfSyntheticTest == nil {
					out.IsApplicationOfSyntheticTest = new([]Relation)
				}
				if in.IsNull() {
					in.Skip()
					*out.IsApplicationOfSyntheticTest = nil
				} else {
					in.Delim('[')
					if *out.IsApplicationOfSyntheticTest == nil {
						if !in.IsDelim(']') {
							*out.IsApplicationOfSyntheticTest = make([]Relation, 0, 4)
						} else {
							*out.IsApplicationOfSyntheticTest = []Relation{}
						}
					} else {
						*out.IsApplicationOfSyntheticTest = (*out.IsApplicationOfSyntheticTest)[:0]
					}
					for !in.IsDelim(']') {
						var v17 Relation
						(v17).UnmarshalEasyJSON(in)
						*out.IsApplicationOfSyntheticTest = append(*out.IsApplicationOfSyntheticTest, v17)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "isGroupOf":
			if in.IsNull() {
				in.Skip()
				out.IsGroupOf = nil
			} else {
				if out.IsGroupOf == nil {
					out.IsGroupOf = new([]Relation)
				}
				if in.IsNull() {
					in.Skip()
					*out.IsGroupOf = nil
				} else {
					in.Delim('[')
					if *out.IsGroupOf == nil {
						if !in.IsDelim(']') {
							*out.IsGroupOf = make([]Relation, 0, 4)
						} else {
							*out.IsGroupOf = []Relation{}
						}
					} else {
						*out.IsGroupOf = (*out.IsGroupOf)[:0]
					}
					for !in.IsDelim(']') {
						var v18 Relation
						(v18).UnmarshalEasyJSON(in)
						*out.IsGroupOf = append(*out.IsGroupOf, v18)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "isApplicationMethodOfGroup":
			if in.IsNull() {
				in.Skip()
				out.IsApplicationMethodOfGroup = nil
			} else {
				if out.IsApplicationMethodOfGroup == nil {
					out.IsApplicationMethodOfGroup = new([]Relation)
				}
				if in.IsNull() {
					in.Skip()
					*out.IsApplicationMethodOfGroup = nil
				} else {
					in.Delim('[')
					if *out.IsApplicationMethodOfGroup == nil {
						if !in.IsDelim(']') {
							*out.IsApplicationMethodOfGroup = make([]Relation, 0, 4)
						} else {
							*out.IsApplicationMethodOfGroup = []Relation{}
						}
					} else {
						*out.IsApplicationMethodOfGroup = (*out.IsApplicationMethodOfGroup)[:0]
					}
					for !in.IsDelim(']') {
						var v19 Relation
						(v19).UnmarshalEasyJSON(in)
						*out.IsApplicationMethodOfGroup = append(*out.IsApplicationMethodOfGroup, v19)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "isChildOf":
			if in.IsNull() {
				in.Skip()
				out.IsChildOf = nil
			} else {
				if out.IsChildOf == nil {
					out.IsChildOf = new([]Relation)
				}
				if in.IsNull() {
					in.Skip()
					*out.IsChildOf = nil
				} else {
					in.Delim('[')
					if *out.IsChildOf == nil {
						if !in.IsDelim(']') {
							*out.IsChildOf = make([]Relation, 0, 4)
						} else {
							*out.IsChildOf = []Relation{}
						}
					} else {
						*out.IsChildOf = (*out.IsChildOf)[:0]
					}
					for !in.IsDelim(']') {
						var v20 Relation
						(v20).UnmarshalEasyJSON(in)
						*out.IsChildOf = append(*out.IsChildOf, v20)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues1(out *jwriter.Writer, in fromRelationships) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RunsOnHost != nil {
		const prefix string = ",\"runsOnHost\":"
		first = false
		out.RawString(prefix[1:])
		if *in.RunsOnHost == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range *in.RunsOnHost {
				if v21 > 0 {
					out.RawByte(',')
				}
				(v22).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.IsProcessOf != nil {
		const prefix string = ",\"isProcessOf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.IsProcessOf == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range *in.IsProcessOf {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.RunsOn != nil {
		const prefix string = ",\"runsOn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.RunsOn == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v25, v26 := range *in.RunsOn {
				if v25 > 0 {
					out.RawByte(',')
				}
				(v26).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.IsInstanceOf != nil {
		const prefix string = ",\"isInstanceOf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.IsInstanceOf == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range *in.IsInstanceOf {
				if v27 > 0 {
					out.RawByte(',')
				}
				(v28).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.IsCgiOfHost != nil {
		const prefix string = ",\"isCgiOfHost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.IsCgiOfHost == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range *in.IsCgiOfHost {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.IsDiskOf != nil {
		const prefix string = ",\"isDiskOf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.IsDiskOf == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range *in.IsDiskOf {
				if v31 > 0 {
					out.RawByte(',')
				}
				(v32).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.IsStepOf != nil {
		const prefix string = ",\"isStepOf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.IsStepOf == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range *in.IsStepOf {
				if v33 > 0 {
					out.RawByte(',')
				}
				(v34).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.IsApplicationOfSyntheticTest != nil {
		const prefix string = ",\"isApplicationOfSyntheticTest\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.IsApplicationOfSyntheticTest == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range *in.IsApplicationOfSyntheticTest {
				if v35 > 0 {
					out.RawByte(',')
				}
				(v36).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.IsGroupOf != nil {
		const prefix string = ",\"isGroupOf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.IsGroupOf == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v37, v38 := range *in.IsGroupOf {
				if v37 > 0 {
					out.RawByte(',')
				}
				(v38).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.IsApplicationMethodOfGroup != nil {
		const prefix string = ",\"isApplicationMethodOfGroup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.IsApplicationMethodOfGroup == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range *in.IsApplicationMethodOfGroup {
				if v39 > 0 {
					out.RawByte(',')
				}
				(v40).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.IsChildOf != nil {
		const prefix string = ",\"isChildOf\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if *in.IsChildOf == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range *in.IsChildOf {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v fromRelationships) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v fromRelationships) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *fromRelationships) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *fromRelationships) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues1(l, v)
}
func easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues2(in *jlexer.Lexer, out *Value) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "entityId":
			out.EntityId = string(in.StringIntern())
		case "firstSeenTms":
			if in.IsNull() {
				in.Skip()
				out.FirstSeenTms = nil
			} else {
				if out.FirstSeenTms == nil {
					out.FirstSeenTms = new(float64)
				}
				*out.FirstSeenTms = float64(in.Float64())
			}
		case "displayName":
			if in.IsNull() {
				in.Skip()
				out.DisplayName = nil
			} else {
				if out.DisplayName == nil {
					out.DisplayName = new(string)
				}
				*out.DisplayName = string(in.StringIntern())
			}
		case "properties":
			if in.IsNull() {
				in.Skip()
				out.Properties = nil
			} else {
				if out.Properties == nil {
					out.Properties = new(properties)
				}
				(*out.Properties).UnmarshalEasyJSON(in)
			}
		case "fromRelationships":
			if in.IsNull() {
				in.Skip()
				out.FromRelationship = nil
			} else {
				if out.FromRelationship == nil {
					out.FromRelationship = new(fromRelationships)
				}
				(*out.FromRelationship).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues2(out *jwriter.Writer, in Value) {
	out.RawByte('{')
	first := true
	_ = first
	if in.EntityId != "" {
		const prefix string = ",\"entityId\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.EntityId))
	}
	if in.FirstSeenTms != nil {
		const prefix string = ",\"firstSeenTms\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.FirstSeenTms))
	}
	if in.DisplayName != nil {
		const prefix string = ",\"displayName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DisplayName))
	}
	if in.Properties != nil {
		const prefix string = ",\"properties\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Properties).MarshalEasyJSON(out)
	}
	if in.FromRelationship != nil {
		const prefix string = ",\"fromRelationships\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.FromRelationship).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Value) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Value) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Value) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Value) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues2(l, v)
}
func easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues3(in *jlexer.Lexer, out *Relation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = string(in.StringIntern())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues3(out *jwriter.Writer, in Relation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != "" {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Relation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Relation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Relation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Relation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues3(l, v)
}
func easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues4(in *jlexer.Lexer, out *RawEntityList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "valueList":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				if out.Values == nil {
					out.Values = new([]Value)
				}
				if in.IsNull() {
					in.Skip()
					*out.Values = nil
				} else {
					in.Delim('[')
					if *out.Values == nil {
						if !in.IsDelim(']') {
							*out.Values = make([]Value, 0, 1)
						} else {
							*out.Values = []Value{}
						}
					} else {
						*out.Values = (*out.Values)[:0]
					}
					for !in.IsDelim(']') {
						var v43 Value
						(v43).UnmarshalEasyJSON(in)
						*out.Values = append(*out.Values, v43)
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues4(out *jwriter.Writer, in RawEntityList) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Values != nil {
		const prefix string = ",\"valueList\":"
		first = false
		out.RawString(prefix[1:])
		if *in.Values == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range *in.Values {
				if v44 > 0 {
					out.RawByte(',')
				}
				(v45).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawEntityList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawEntityList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawEntityList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawEntityList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues4(l, v)
}
func easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues5(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.StringIntern())
		case "value":
			out.Value = string(in.StringIntern())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues5(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		const prefix string = ",\"key\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1e8039f5EncodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1e8039f5DecodeGithubComDynatraceDynatraceConfigManagerOneTopologyPkgMatchEntitiesValues5(l, v)
}
